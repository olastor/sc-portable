name: "Build"

on:
  push:
    branches:
      - main

jobs:
  # build-docs:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v3
  #     - name: build docs
  #       run: |
  #         pip3 install --user mkdocs-material
  #         cd docs
  #         mkdocs build
  #     - uses: actions/upload-artifact@v3
  #       with:
  #         name: binaries
  #         path: binaries/
  #         retention-days: 5

  build-data:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/cache@v3
        id: cache
        with:
          path: |
            api/
            client/
          key: ${{ runner.os }}-${{ hashFiles('import.py') }}-${{ hashFiles('.github/workflows/build.yml') }}
      - name: build the data
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          git clone https://github.com/suttacentral/suttacentral
          cd suttacentral
          sed -i 's/sc-elasticsearch//g' Makefile
          mv "$GITHUB_WORKSPACE/import.py" ./server/server/
          make run-preview-env-no-search
          export FRONTEND_IMAGE=$(docker ps | grep sc-frontend | cut -d' ' -f1)
          docker exec $FRONTEND_IMAGE bash -c "sed -i '/BundleAnalyzerPlugin/d' webpack.common.js && node_modules/.bin/webpack --no-watch --config webpack.prod.js"
          docker cp $FRONTEND_IMAGE:/opt/sc/frontend/build .
          mv ./build ../client
          export FLASK_IMAGE=$(docker ps | grep sc-flask | cut -d' ' -f1)
          docker exec $FLASK_IMAGE python3 server/import.py
          sudo mv server/out ../api
          cd ..
          sudo zip -r api.zip api/ # special characters making some errors, need to zip it
          ls -l
      - uses: actions/upload-artifact@v3
        with:
          name: sc-client
          path: client/
          retention-days: 5
      - uses: actions/upload-artifact@v3
        with:
          name: sc-api-data
          path: api.zip
          retention-days: 5

  build-redbean:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/cache@v3
        id: cache
        with:
          path: binaries/
          key: ${{ hashFiles('redbean-version.txt') }}-${{ hashFiles('.github/workflows/build.yml') }}
      - name: build the data
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          export COSMO_GIT_REF=$(cat redbean-version.txt)
          git clone https://github.com/jart/cosmopolitan.git
          cd cosmopolitan
          git checkout $COSMO_GIT_REF
          sudo sh -c "echo ':APE:M::MZqFpD::/bin/sh:' >/proc/sys/fs/binfmt_misc/register"
          make -j8 o//tool/net/redbean.com >> build.log 2>&1
          mv build.log ..
          mv o/tool/net ../binaries
      - uses: actions/upload-artifact@v3
        with:
          name: redbean-binaries
          path: binaries/
          retention-days: 5

  bundle:
    runs-on: ubuntu-latest
    needs: ["build-data", "build-redbean"]
    steps:
      - uses: actions/checkout@v3
      - name: get data
        uses: actions/download-artifact@v3
        with:
          name: |
            redbean-binaries
            sc-api-data
            sc-client
      - name: get redbean
        uses: actions/download-artifact@v3
        with:
          name: binaries/
      - name: package it
        run: |
          unzip api.zip
          mv binaries/redbean.com .
          ./package.sh "en" "redbean.com"
      - uses: actions/upload-artifact@v3
        with:
          name: result
          path: redbean.com
          retention-days: 5
